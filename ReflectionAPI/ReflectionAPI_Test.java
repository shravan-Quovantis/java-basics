package ReflectionAPI;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public class ReflectionAPI_Test {
    public static void main(String[] args) throws Exception{
        Class c = Class.forName("OOPs.Employee");        //Bytecode will be generated by JVM and object of class will be assigned

        //Methods in class Class to get Metadata of Class
        System.out.println("Name of the class: " + c.getName());
        System.out.println("Super class of class: "+ c.getSuperclass().getName());
        Class[] classes = c.getInterfaces();
        System.out.print("Interface List of class: ");
        for(Class cls: classes){
            System.out.print(cls.getName()+" ");
        }
        System.out.println();
        System.out.println("Modifier of class: "+ Modifier.toString(c.getModifiers()));

        //Methods in class Class to get Metadata of Field
        Field[] fields = c.getDeclaredFields();                         //It will fetch only the field which is defined in class
        System.out.println("\nField List");
        for(Field field: fields){
            System.out.println("field Name: "+field.getName());
            System.out.println("field Type of field: "+ field.getType().getName());
            int f = field.getModifiers();
            System.out.println("field Modifier: "+ Modifier.toString(f));
            System.out.println("field Value: "+ field.get(f)+"\n");
        }

        //Methods to get the Method information
        Method[] methods_A = c.getMethods();                   //Retrieves methods from the current class and super class
        Method[] methods_B = c.getDeclaredMethods();           //Retrieves methods from current class
        System.out.println("Methods: ");
        for(Method method : methods_B){
            System.out.println("Method Name: "+ method.getName());                    //Retrieves name of the method
            System.out.println("Method Return Type: " + method.getReturnType());
            int cModifiers = c.getModifiers();
            System.out.println("Method Modifier: "+ Modifier.toString(cModifiers));
            Class[] paramType = method.getParameterTypes();
            for(Class parameterType:paramType){
                System.out.println("Method Parameters Type: "+ parameterType.getName());
            }
            Class[] exceptionTypes = method.getExceptionTypes();
            for(Class exceptionType:exceptionTypes){
                System.out.println("Method Exception Type: "+ exceptionType.getName());
            }
            System.out.println();
        }

        //Methods to get information about Constructors
        Constructor[] constructors = c.getDeclaredConstructors();
        System.out.println("Constructors: ");
        boolean Flag= true;
        for(Constructor constructor : constructors){
            if(Flag){
                System.out.println("Constructors Name: "+ constructor.getName()+"\n");
                Flag = false;
            }
            int l = constructor.getModifiers();
            System.out.println("Constructors Modifier: "+ Modifier.toString(l));

            System.out.print("Constructors Parameter Types: ");
            Class[] paramType = constructor.getParameterTypes();
            for(Class parameterType: paramType){
                System.out.print(parameterType.getName()+", ");
            }
            System.out.println();
            System.out.println();
        }

    }
}
